head(addmargins(table(de_variants$ID, de_variants$Adjusted_pvalue <= 0.05)))
head(summed)
apply(summed, 1, median)
View(summed)
View(sig)
View(de_variants)
View(results)
summed %>% select_if(is_numeric) %>% apply(., 1, median)
str(summed)
medians = summed %>% select(-c(eventsName, eventsLength)) %>% apply(., 1, median)
medians = summed %>% ungroup() %>%  select(-c(eventsName, eventsLength)) %>% apply(., 1, median)
ggplot(medians) +geom_histogram()
ggplot(data.frame(medians)) +geom_histogram()
ggplot(data.frame("med" =medians), x=med) +geom_histogram()
ggplot(data.frame("med"=medians), aes(x=med)) + geom_histogram()
ggplot(data.frame("med"=medians), aes(x=med)) + geom_density()
IQR(medians)
quantile(medians)
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
gm_mean(medians)
quantile(medians)
gmmeans = summed %>%
ungroup() %>%
select(-c(eventsName, eventsLength)) %>%
apply(., 1, gm_mean)
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
gmmeans
quantile(gmmeans)
means = summed %>%
ungroup() %>%
select(-c(eventsName, eventsLength)) %>%
apply(., 1, mean)
quantile(means)
quantile(rowcounts)
View(sig)
View(results)
sig = results %>% filter(Adjusted_pvalue <= 0.05)
View(sig)
sig = de_variants %>%
filter(Adjusted_pvalue <= 0.05) %>% arrange(Adjusted_pvalue)
sig = results %>% filter(Adjusted_pvalue <= 0.05) %>% %>% arrange(Adjusted_pvalue)
sig = results %>% filter(Adjusted_pvalue <= 0.05) %>% arrange(Adjusted_pvalue)
View(sig)
sig[1,]
View(de_variants)
rm(list=ls())
library(data.table)
library(kissDE)
library(glue)
library(tidyverse)
library(rtracklayer)
library(data.table)
library(kissDE)
library(glue)
library(tidyverse)
library(rtracklayer)
######## parse files #############
chroms = c(1,2,3) #snakemake@params[1]
metadata = fread("config/samples.tsv") #snakemkae
names = fread("resources/DE.comparison.list", header = FALSE) #@snakemake
comparisons = names %>% separate(V1, into = c("control", "case"), sep = "_")
mincounts = 100 #snakemakeparams
pval = 0.001
pval = 0.001
gffpath = "resources/reference/VectorBase-48_AaegyptiLVP_AGWG.gff"
#load gff with rtracklayer and filter to genes only
gff = rtracklayer::import(gffpath) %>%
as.data.frame() %>%
filter(type == 'gene') %>%
select(-c(source, score, phase, strand, width, Parent, Note, protein_source_id, Ontology_term)) %>%
rename("chrom" = "seqnames") %>%
arrange(chrom, start) %>%
as.data.table()
#remove prefix for chrom column, so it matches the bed file
gff$chrom = str_remove(gff$chrom, "AaegL5_") #could be snakemake param if needed
#for each contrast/comparison, perform differential SNP analysis
for (i in 1:nrow(comparisons)){
name = names[i,]
control = comparisons$control[i]
case = comparisons$case[i]
samples = metadata[metadata$treatment %in% c(case, control)]$samples
print(glue("Extracting allele tables for {case}, {control}"))
sample_list = list()
for (sample in samples){
chrom_list = list()
for (chrom in chroms){
#read in data
alleles  = fread(glue("results/variants/alleleTable/{sample}.chr{chrom}.allele.table"))
#sum lowercase and uppercase alleles, make new column (refcount)
chrom_list[[chrom]] = alleles %>%
mutate("A" = A+a,"T" = T+t,"G" = G+g,"C" = C+c) %>%
select(-c(a,t,c,g,V15)) %>%
mutate(refcount = case_when(ref == 'T' ~ T,
ref == 'G' ~ G,
ref == 'A' ~ A,
ref == 'C' ~ C))
}
#bind chroms together
alleles = rbindlist(chrom_list)
#this step find the most abundant ALT base, whether A,T,C or G, assigns its count as 'altcount'
list_ = list()
for (base in c("A", "C", "G", "T")){
a = alleles %>% filter(ref == base) %>% select(A,T,C,G) %>% select(-base)
b = alleles %>% filter(ref == base)
col = colnames(a)[apply(a, 1 , which.max)]
b$alt = col
b$altcount = apply(a, 1, max)
list_[[base]] = b
}
alleles = rbindlist(list_) %>% arrange(chr, loc)
#pivot to get separate rows for refcount and altcount as preferred by kissDE package
sample_list[[sample]] = alleles %>% select(chr, loc, ref,alt, refcount, altcount) %>%
pivot_longer(c(refcount, altcount),names_to="type", values_to=sample) %>%
mutate(eventsName = paste0("chr",chr,"_",loc,"_",ref,">",alt)) %>%
select(eventsName,type, sample)
}
#merge all counts across samples
counts = sample_list %>%
reduce(full_join, by=c("eventsName", "type")) %>%
mutate("eventsLength" = 1) %>%
replace(is.na(.), 0) %>%
select(-type) %>%
relocate(eventsLength, .after=eventsName) %>%
as.data.frame()
#sum refs and alts together for each snp to use as filter
print(glue("Filtering SNP count data at a minimum of {mincounts} summed across samples"))
summed = counts %>%
group_by(eventsName, eventsLength) %>%
summarise_all(sum)
#get rowsums of counts, to use as filter
rowcounts = summed %>% ungroup %>% select(-c(eventsName, eventsLength)) %>% rowSums()
summed = summed[rowcounts >= mincounts,]
print(glue("Retaining {nrow(summed)} SNPs, out of {length(rowcounts)}"))
#remove snps that have a count across samples less than mincounts(100)
counts = counts[counts$eventsName %in% summed$eventsName,]
conditionsde = c(rep(control, 3), rep(case,3))
#rename counts columns for kissde
colnames(counts) = colnames(counts) %>%
str_replace("1", "rep1") %>%
str_replace("2", "rep2") %>%
str_replace("3", "rep3")
#run kissde quality control
print(glue("Running kissDE QC for {name}"))
qualityControl(counts, conditionsde, storeFigs = "results/variants/snptesting/kissDEfigs")
#Run kissde algorithm to find differentially expressed variants
de_Vars = diffExpressedVariants(counts, conditions = conditionsde)
#parse results to more readable, filterable form
results = de_Vars[[1]] %>% separate(ID, into = c("chrom", "pos", "REF>ALT"), sep="_") %>%
mutate("pos" = as.numeric(pos), "chrom" = as.numeric(str_remove(chrom, "chr"))) %>%
arrange(chrom, pos)
############ intersect (data.table::foverlap) gff and results to get gene names and descriptions of snps #######
bed = results %>%
select(chrom, pos, Adjusted_pvalue, `Deltaf/DeltaPSI`) %>%
mutate("chrom" = as.character(chrom), "start" = as.numeric(pos) -1, "end" = as.numeric(pos)) %>%
select(chrom, start, end, Adjusted_pvalue, `Deltaf/DeltaPSI`, -pos) %>%
as.data.table()
#data table fast overlaps, useful to find intersections and join
setkey(gff, chrom, start, end)
de_variants = foverlaps(bed, gff,
by.x=c("chrom", "start", "end"),
by.y=c("chrom", "start", "end"),
type = "within",
nomatch = 0L)
#write to file
print(glue("Writing {name} results to results/variants/snptesting/"))
fwrite(results, glue("results/variants/snptesting/{name}.normcounts.tsv", sep="\t", row.names=FALSE))
fwrite(de_variants, glue("results/variants/snptesting/{name}.kissDE.tsv", sep="\t", row.names=FALSE))
de_variants %>%
filter(Adjusted_pvalue <= pval) %>%
fwrite(., glue("results/variants/snptesting/{name}.sig.kissDE.tsv"), sep="\t", row.names=FALSE)
}
#for each contrast/comparison, perform differential SNP analysis
for (i in 1:nrow(comparisons)){
name = names[i,]
control = comparisons$control[i]
case = comparisons$case[i]
samples = metadata[metadata$treatment %in% c(case, control)]$samples
print(glue("Extracting allele tables for {case}, {control}"))
sample_list = list()
for (sample in samples){
chrom_list = list()
for (chrom in chroms){
#read in data
alleles  = fread(glue("results/variants/alleleTable/{sample}.chr{chrom}.allele.table"))
#sum lowercase and uppercase alleles, make new column (refcount)
chrom_list[[chrom]] = alleles %>%
mutate("A" = A+a,"T" = T+t,"G" = G+g,"C" = C+c) %>%
select(-c(a,t,c,g,V15)) %>%
mutate(refcount = case_when(ref == 'T' ~ T,
ref == 'G' ~ G,
ref == 'A' ~ A,
ref == 'C' ~ C))
}
#bind chroms together
alleles = rbindlist(chrom_list)
#this step find the most abundant ALT base, whether A,T,C or G, assigns its count as 'altcount'
list_ = list()
for (base in c("A", "C", "G", "T")){
a = alleles %>% filter(ref == base) %>% select(A,T,C,G) %>% select(-base)
b = alleles %>% filter(ref == base)
col = colnames(a)[apply(a, 1 , which.max)]
b$alt = col
b$altcount = apply(a, 1, max)
list_[[base]] = b
}
alleles = rbindlist(list_) %>% arrange(chr, loc)
#pivot to get separate rows for refcount and altcount as preferred by kissDE package
sample_list[[sample]] = alleles %>% select(chr, loc, ref,alt, refcount, altcount) %>%
pivot_longer(c(refcount, altcount),names_to="type", values_to=sample) %>%
mutate(eventsName = paste0("chr",chr,"_",loc,"_",ref,">",alt)) %>%
select(eventsName,type, sample)
}
#merge all counts across samples
counts = sample_list %>%
reduce(full_join, by=c("eventsName", "type")) %>%
mutate("eventsLength" = 1) %>%
replace(is.na(.), 0) %>%
select(-type) %>%
relocate(eventsLength, .after=eventsName) %>%
as.data.frame()
#sum refs and alts together for each snp to use as filter
print(glue("Filtering SNP count data at a minimum of {mincounts} summed across samples"))
summed = counts %>%
group_by(eventsName, eventsLength) %>%
summarise_all(sum)
#get rowsums of counts, to use as filter
rowcounts = summed %>% ungroup %>% select(-c(eventsName, eventsLength)) %>% rowSums()
summed = summed[rowcounts >= mincounts,]
print(glue("Retaining {nrow(summed)} SNPs, out of {length(rowcounts)}"))
#remove snps that have a count across samples less than mincounts(100)
counts = counts[counts$eventsName %in% summed$eventsName,]
conditionsde = c(rep(control, 3), rep(case,3))
#rename counts columns for kissde
colnames(counts) = colnames(counts) %>%
str_replace("1", "rep1") %>%
str_replace("2", "rep2") %>%
str_replace("3", "rep3")
#run kissde quality control
print(glue("Running kissDE QC for {name}"))
qualityControl(counts, conditionsde, storeFigs = glue("results/variants/snptesting/kissDEfigs_{name}"))
#Run kissde algorithm to find differentially expressed variants
de_Vars = diffExpressedVariants(counts, conditions = conditionsde)
#parse results to more readable, filterable form
results = de_Vars[[1]] %>% separate(ID, into = c("chrom", "pos", "REF>ALT"), sep="_") %>%
mutate("pos" = as.numeric(pos), "chrom" = as.numeric(str_remove(chrom, "chr"))) %>%
arrange(chrom, pos)
############ intersect (data.table::foverlap) gff and results to get gene names and descriptions of snps #######
bed = results %>%
select(chrom, pos, Adjusted_pvalue, `Deltaf/DeltaPSI`, `REF>ALT`) %>%
mutate("chrom" = as.character(chrom), "start" = as.numeric(pos) -1, "end" = as.numeric(pos)) %>%
select(chrom, start, end, Adjusted_pvalue, `Deltaf/DeltaPSI`,`REF>ALT`, -pos) %>%
as.data.table()
#data table fast overlaps, useful to find intersections and join
setkey(gff, chrom, start, end)
de_variants = foverlaps(bed, gff,
by.x=c("chrom", "start", "end"),
by.y=c("chrom", "start", "end"),
type = "within",
nomatch = 0L)
#write to file
print(glue("Writing {name} results to results/variants/snptesting/"))
fwrite(results, glue("results/variants/snptesting/{name}.normcounts.tsv"), sep="\t", row.names=FALSE)
fwrite(de_variants, glue("results/variants/snptesting/{name}.kissDE.tsv"), sep="\t", row.names=FALSE)
de_variants %>%
filter(Adjusted_pvalue <= pval) %>%
fwrite(., glue("results/variants/snptesting/{name}.sig.kissDE.tsv"), sep="\t", row.names=FALSE)
}
install.packages("openxlsx")
install.packages("stringi")
install.packages("openxlsx")
q()
library(openxlsx)
.libPaths()
q()
q()
gffpath ="resources/reference/VectorBase-48_AaegyptiLVP_AGWG.gff"
library(data.table)
library(kissDE)
library(glue)
library(tidyverse)
library(rtracklayer)
#load gff with rtracklayer and filter to genes only
gff = rtracklayer::import(gffpath) %>%
as.data.frame() %>%
filter(type == 'gene') %>%
select(-c(source, score, phase, strand, width, Parent, Note, protein_source_id, Ontology_term)) %>%
rename("chrom" = "seqnames") %>%
arrange(chrom, start) %>%
as.data.table()
gffpath ="resources/reference/VectorBase-48_AaegyptiLVP_AGWG.gff"
#load gff with rtracklayer and filter to genes only
gff = rtracklayer::import(gffpath) %>%
as.data.frame() %>%
filter(type == 'gene')# %>%
View(gff)
gffpath ="resources/reference/VectorBase-48_AaegyptiLVP_AGWG.gff"
#load gff with rtracklayer and filter to genes only
gff = rtracklayer::import(gffpath) %>%
as.data.frame() %>%
filter(type == 'gene') %>%
select(-c(source, score, phase, strand, width, Parent, Note, protein_source_id, Ontology_term)) #%>%
View(gff)
View(gff)
colnames(gff)
#load gff with rtracklayer and filter to genes only
gff = rtracklayer::import(gffpath) %>%
as.data.frame() %>%
filter(type == 'gene') %>%
select(-c(source, score, phase, strand, width, Parent, Note, protein_source_id, Ontology_term)) #%>%
#load gff with rtracklayer and filter to genes only
gff = rtracklayer::import(gffpath) %>%
as.data.frame() %>%
filter(type == 'gene') %>%
select(-c(source, score, phase, strand, width, Parent, Note, protein_source_id, Ontology_term)) %>%
rename("chrom" = "seqnames")# %>%
#load gff with rtracklayer and filter to genes only
gff = rtracklayer::import(gffpath) %>%
as.data.frame() %>%
filter(type == 'gene') %>%
select(-c(source, score, phase, strand, width, Parent, Note, protein_source_id, Ontology_term)) %>%
rename("seqnames" = "chrom")# %>%
colnames(gff)
gffpath ="resources/reference/VectorBase-48_AaegyptiLVP_AGWG.gff"
#load gff with rtracklayer and filter to genes only
gff = rtracklayer::import(gffpath) %>%
as.data.frame() %>%
filter(type == 'gene') %>%
select(-c(source, score, phase, strand, width, Parent, Note, protein_source_id, Ontology_term)) %>%
rename("chrom" = seqnames)# %>%
gffpath ="resources/reference/VectorBase-48_AaegyptiLVP_AGWG.gff"
#load gff with rtracklayer and filter to genes only
gff = rtracklayer::import(gffpath) %>%
as.data.frame() %>%
filter(type == 'gene') %>%
select(-c(source, score, phase, strand, width, Parent, Note, protein_source_id, Ontology_term)) %>%
dplyr::rename("chrom" = "seqnames")# %>%
colnames(gff)
go = fread("resources/reference/VectorBase-48_AaegyptiLVP_AGWG_GO.gaf", sep = "\t", skip = 1, header = FALSE) %>%
as_tibble()
go = go[,c(2,5)]
library(gage)
library(KEGGREST)
library(clusterProfiler)
library(fgsea)
library(data.table)
library(glue)
library(tidyverse)
go = fread("resources/reference/VectorBase-48_AaegyptiLVP_AGWG_GO.gaf", sep = "\t", skip = 1, header = FALSE) %>%
as_tibble()
go = go[,c(2,5)]
View(go)
samples = fread("config/samples.tsv") %>% as.data.frame()
comparisons = fread("resources/DE.comparison.list", header = FALSE)
samples = fread("config/samples.tsv") %>% as.data.frame()
comparisons = fread("resources/DE.contrast.list", header = FALSE)
de = fread("../RNA_Seq_Ag/analysis/diff/ContAbo_MalaAbo.csv")
de = fread("results/genediff/ContAngola_FenAngola.csv")
de = de[order(log2FoldChange)]
rank = de[,c('Gene_stable_ID', 'log2FoldChange')] %>% column_to_rownames('Gene_stable_ID')
rank = de[,c('GeneID', 'log2FoldChange')] %>% column_to_rownames('Gene_stable_ID')
rank = de[,c('GeneID', 'log2FoldChange')] %>% column_to_rownames('GeneID')
######
rownames(rank) = rownames(rank) %>% str_replace("AGAP", "AgaP_AGAP")
head(rank)
head(rank)
######
rownames(rank) = rownames(rank) %>% str_replace("AGAP", "AgaP_AGAP")
head(rank)
View(rank)
######
rownames(rank) = rownames(rank) %>% str_replace("AGAP", "AgaP_AGAP")
head(rank)
#------------------- get a.gambiae kegg pathways -------------------------
kg.aga=kegg.gsets("aga")
kg.aga.gs=kg.aga$kg.sets[kg.aga$sigmet.idx]
kg.aga
#kegg pathway enrichment
kegg_enrich <- gage(rank, gsets=kg.aga.gs)
kegg_enrich
keggdf = as.data.frame(kegg_enrich$greater)
kegg_sig<-sigGeneSet(kegg_enrich, outname="aga.gage")
View(keggdf)
rank2 = setNames(rank$log2FoldChange, rownames(rank))
str(rank2)
de = fread("../RNA_Seq_Ag/analysis/diff/ContAbo_MalaAbo.csv")
de = fread("../rna-seq-abo-tiass/results/genediff/ContAbo_MalaAbo.csv")
de = de[order(log2FoldChange)]
rank = de[,c('Gene_stable_ID', 'log2FoldChange')] %>% column_to_rownames('Gene_stable_ID')
######
rownames(rank) = rownames(rank) %>% str_replace("AGAP", "AgaP_AGAP")
head(rank)
rank = de[,c('GeneID', 'log2FoldChange')] %>% column_to_rownames('GeneID')
######
rownames(rank) = rownames(rank) %>% str_replace("AGAP", "AgaP_AGAP")
head(rank)
head(rank)
#------------------- get a.gambiae kegg pathways -------------------------
kg.aga=kegg.gsets("aga")
kg.aga.gs=kg.aga$kg.sets[kg.aga$sigmet.idx]
kg.aga
#kegg pathway enrichment
kegg_enrich <- gage(rank, gsets=kg.aga.gs)
kegg_enrich
keggdf = as.data.frame(kegg_enrich$greater)
kegg_sig<-sigGeneSet(kegg_enrich, outname="aga.gage")
View(keggdf)
de = fread("../rna-seq-abo-tiass/results/genediff/ContTia_DeltTia.csv")
de = de[order(log2FoldChange)]
rank = de[,c('GeneID', 'log2FoldChange')] %>% column_to_rownames('GeneID')
######
rownames(rank) = rownames(rank) %>% str_replace("AGAP", "AgaP_AGAP")
head(rank)
#kegg pathway enrichment
kegg_enrich <- gage(rank, gsets=kg.aga.gs)
kegg_enrich
keggdf = as.data.frame(kegg_enrich$greater)
kegg_sig<-sigGeneSet(kegg_enrich, outname="aga.gage")
View(keggdf)
keggdown = as.data.frame(kegg_enrich$less)
View(keggdown)
de = fread("../rna-seq-abo-tiass/results/genediff/ContTia_PiriTia.csv")
de = de[order(log2FoldChange)]
rank = de[,c('GeneID', 'log2FoldChange')] %>% column_to_rownames('GeneID')
#kegg pathway enrichment
kegg_enrich <- gage(rank, gsets=kg.aga.gs)
kegg_enrich
keggup = as.data.frame(kegg_enrich$greater)
keggdown = as.data.frame(kegg_enrich$less)
kegg_sig<-sigGeneSet(kegg_enrich, outname="aga.gage")
de = fread("../rna-seq-abo-tiass/results/genediff/ContTia_DeltTia.csv")
de = de[order(log2FoldChange)]
rank = de[,c('GeneID', 'log2FoldChange')] %>% column_to_rownames('GeneID')
#kegg pathway enrichment
kegg_enrich <- gage(rank, gsets=kg.aga.gs)
kegg_enrich
keggup = as.data.frame(kegg_enrich$greater)
keggdown = as.data.frame(kegg_enrich$less)
kegg_sig<-sigGeneSet(kegg_enrich, outname="aga.gage")
de = fread("../rna-seq-abo-tiass/results/genediff/ContTia_DeltTia.csv")
de = de[order(log2FoldChange)]
rank = de[,c('GeneID', 'log2FoldChange')] %>% column_to_rownames('GeneID')
######
rownames(rank) = rownames(rank) %>% str_replace("AGAP", "AgaP_AGAP")
head(rank)
#kegg pathway enrichment
kegg_enrich <- gage(rank, gsets=kg.aga.gs)
kegg_enrich
keggup = as.data.frame(kegg_enrich$greater)
keggdown = as.data.frame(kegg_enrich$less)
kegg_sig<-sigGeneSet(kegg_enrich, outname="aga.gage")
library(data.table)
library(kissDE)
library(glue)
library(tidyverse)
library(data.table)
samples = fread("../samples_bouake.tsv", sep="\t")
head(samples)
samples = fread("../samples_bouake.tsv", sep="\s+")
samples = fread("../samples_bouake.tsv", sep="    ")
samples = fread("../samples_bouake.tsv", sep="  ")
samples = fread("../samples_bouake.tsv", sep="\t")
head(samples)
samples = fread("../samples_bouake.tsv")
head(samples)
View(samples)
samples$samples
samples$samples %>% str_pad("Anogam_")
paste0("Anogam_", samples$samples)
samples$samples = paste0("Anogam_", samples$samples)
fwrite(samples, "samples_b.tsv, sep=\t")
fwrite(samples, "samples_b.tsv", sep="\t")
library(data.table)
fwrite(samples, "samples_b.tsv", sep="\t")
library(tidyv)
library(tidyverse)
library(data.table)
samples = fread("../samples_bouake.tsv")
samples = fread("samples_b.tsv")
head(samples)
counts = data.frame("Anogam_Ki11" = c(100,500),
"Anogam_Ki2" = c(1000, 300),
"Anogam_MC6" = c(10,20),
"Anogam_MC7" = c(5,7))
head(counts)
samples[c(1,2,5,6),]
subsamples = samples[c(1,2,5,6),]
head(counts)
View(subsamples)
edit(subsamples)
head(counts)
data.frame(t(rowsum(t(counts), group = subsamples$treatment, na.rm = T))) #transpose and ge$
subsample[3,2] = subsamples[4,2]
subsamples[3,2] = subsamples[4,2]
data.frame(t(rowsum(t(counts), group = subsamples$treatment, na.rm = T))) #transpose and ge$
head(counts)
head(counts)
data.frame(t(rowsum(t(counts), group = subsamples$treatment, na.rm = T))) #transpose and ge$
head(counts)
data.frame(t(rowsum(t(counts), group = subsamples$treatment, na.rm = T))) #transpose and ge$
head(counts)
t(counts)
rowsum(t(counts))
rowsum(t(counts), group = subsamples$treatment)
head(counts)
rowsum(t(counts), group = subsamples$treatment)
t(rowsum(t(counts), group = subsamples$treatment))
head(counts)
rowsum(counts, group = subsamples$treatment)
